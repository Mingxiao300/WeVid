<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/youtube_processor.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/youtube_processor.py" />
              <option name="originalContent" value="import yt_dlp&#10;import os&#10;from pathlib import Path&#10;&#10;class YouTubeProcessor:&#10;    def __init__(self):&#10;        # Configure yt-dlp options for audio extraction&#10;        self.ydl_opts = {&#10;            'format': 'bestaudio/best',&#10;            'postprocessors': [{&#10;                'key': 'FFmpegExtractAudio',&#10;                'preferredcodec': 'mp3',&#10;                'preferredquality': '192',&#10;            }],&#10;            'quiet': True,&#10;            'no_warnings': True,&#10;        }&#10;&#10;        # Create downloads directory if it doesn't exist&#10;        self.download_dir = Path(&quot;downloads&quot;)&#10;        self.download_dir.mkdir(exist_ok=True)&#10;&#10;    def process_url(self, url: str) -&gt; str:&#10;        &quot;&quot;&quot;Download audio from YouTube URL and return path to audio file&quot;&quot;&quot;&#10;        # Set output template&#10;        self.ydl_opts['outtmpl'] = str(self.download_dir / '%(title)s.%(ext)s')&#10;        self.ydl_opts['progress_hooks'] = [self._download_hook]&#10;&#10;        try:&#10;            # Download the video&#10;            with yt_dlp.YoutubeDL(self.ydl_opts) as ydl:&#10;                print(f&quot;\nFetching video info from YouTube...&quot;)&#10;                info = ydl.extract_info(url, download=True)&#10;&#10;                # Get the path of downloaded audio file&#10;                output_path = str(self.download_dir / f&quot;{info['title']}.mp3&quot;)&#10;&#10;                # Verify file exists and has content&#10;                if not os.path.exists(output_path):&#10;                    raise FileNotFoundError(f&quot;Download failed: File not found at {output_path}&quot;)&#10;&#10;                file_size = os.path.getsize(output_path)&#10;                if file_size == 0:&#10;                    raise RuntimeError(f&quot;Download failed: File is empty at {output_path}&quot;)&#10;&#10;                print(f&quot;\nDownload completed successfully!&quot;)&#10;                print(f&quot;File size: {file_size / (1024*1024):.2f} MB&quot;)&#10;                return output_path&#10;&#10;        except Exception as e:&#10;            print(f&quot;\nError during download: {str(e)}&quot;)&#10;            print(f&quot;URL attempted: {url}&quot;)&#10;            print(f&quot;Download directory: {self.download_dir}&quot;)&#10;            raise RuntimeError(f&quot;Failed to download YouTube video: {str(e)}&quot;)&#10;&#10;    def _download_hook(self, d):&#10;        &quot;&quot;&quot;Progress hook for yt-dlp&quot;&quot;&quot;&#10;        if d['status'] == 'downloading':&#10;            try:&#10;                percent = d['_percent_str']&#10;                speed = d.get('_speed_str', 'N/A')&#10;                print(f&quot;\rDownloading... {percent} at {speed}&quot;, end='', flush=True)&#10;            except KeyError:&#10;                pass&#10;        elif d['status'] == 'finished':&#10;            print(&quot;\nDownload finished, converting to MP3...&quot;)&#10;&#10;def analyze_youtube_podcast(youtube_url: str, analyzer) -&gt; list:&#10;    &quot;&quot;&quot;Download and analyze a YouTube podcast&quot;&quot;&quot;&#10;    processor = YouTubeProcessor()&#10;    print(&quot;Downloading YouTube audio...&quot;)&#10;    audio_path = processor.process_url(youtube_url)&#10;    print(f&quot;Audio downloaded to: {audio_path}&quot;)&#10;&#10;    print(&quot;Analyzing audio content...&quot;)&#10;    segments = analyzer.analyze_audio(audio_path, is_url=False)&#10;    return segments&#10;" />
              <option name="updatedContent" value="import yt_dlp&#10;import os&#10;from pathlib import Path&#10;&#10;class YouTubeProcessor:&#10;    def __init__(self):&#10;        # Configure yt-dlp options for audio extraction&#10;        self.ydl_opts = {&#10;            'format': 'bestaudio/best',&#10;            'postprocessors': [{&#10;                'key': 'FFmpegExtractAudio',&#10;                'preferredcodec': 'mp3',&#10;                'preferredquality': '192',&#10;            }],&#10;            'quiet': True,&#10;            'no_warnings': True,&#10;        }&#10;&#10;        # Add cookies file for restricted videos&#10;        self.ydl_opts['cookiefile'] = 'cookies.txt'  # Ensure this file is exported from your browser&#10;&#10;        # Create downloads directory if it doesn't exist&#10;        self.download_dir = Path(&quot;downloads&quot;)&#10;        self.download_dir.mkdir(exist_ok=True)&#10;&#10;    def process_url(self, url: str) -&gt; str:&#10;        &quot;&quot;&quot;Download audio from YouTube URL and return path to audio file&quot;&quot;&quot;&#10;        # Set output template&#10;        self.ydl_opts['outtmpl'] = str(self.download_dir / '%(title)s.%(ext)s')&#10;        self.ydl_opts['progress_hooks'] = [self._download_hook]&#10;&#10;        try:&#10;            # Download the video&#10;            with yt_dlp.YoutubeDL(self.ydl_opts) as ydl:&#10;                print(f&quot;\nFetching video info from YouTube...&quot;)&#10;                info = ydl.extract_info(url, download=True)&#10;&#10;                # Get the path of downloaded audio file&#10;                output_path = str(self.download_dir / f&quot;{info['title']}.mp3&quot;)&#10;&#10;                # Verify file exists and has content&#10;                if not os.path.exists(output_path):&#10;                    raise FileNotFoundError(f&quot;Download failed: File not found at {output_path}&quot;)&#10;&#10;                file_size = os.path.getsize(output_path)&#10;                if file_size == 0:&#10;                    raise RuntimeError(f&quot;Download failed: File is empty at {output_path}&quot;)&#10;&#10;                print(f&quot;\nDownload completed successfully!&quot;)&#10;                print(f&quot;File size: {file_size / (1024*1024):.2f} MB&quot;)&#10;                return output_path&#10;&#10;        except Exception as e:&#10;            print(f&quot;\nError during download: {str(e)}&quot;)&#10;            print(f&quot;URL attempted: {url}&quot;)&#10;            print(f&quot;Download directory: {self.download_dir}&quot;)&#10;            raise RuntimeError(f&quot;Failed to download YouTube video: {str(e)}&quot;)&#10;&#10;    def _download_hook(self, d):&#10;        &quot;&quot;&quot;Progress hook for yt-dlp&quot;&quot;&quot;&#10;        if d['status'] == 'downloading':&#10;            try:&#10;                percent = d['_percent_str']&#10;                speed = d.get('_speed_str', 'N/A')&#10;                print(f&quot;\rDownloading... {percent} at {speed}&quot;, end='', flush=True)&#10;            except KeyError:&#10;                pass&#10;        elif d['status'] == 'finished':&#10;            print(&quot;\nDownload finished, converting to MP3...&quot;)&#10;&#10;def analyze_youtube_podcast(youtube_url: str, analyzer) -&gt; list:&#10;    &quot;&quot;&quot;Download and analyze a YouTube podcast&quot;&quot;&quot;&#10;    processor = YouTubeProcessor()&#10;    print(&quot;Downloading YouTube audio...&quot;)&#10;    audio_path = processor.process_url(youtube_url)&#10;    print(f&quot;Audio downloaded to: {audio_path}&quot;)&#10;&#10;    print(&quot;Analyzing audio content...&quot;)&#10;    segments = analyzer.analyze_audio(audio_path, is_url=False)&#10;    return segments" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>